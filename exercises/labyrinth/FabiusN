#include <stdio.h>

//start bei [0][0], ende bei [9][9]

#define DIMX 10
#define DIMY 10

short int labyrinth [DIMX][DIMY] = {
   { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
   { 1, 0, 0, 1, 0, 1, 0, 0, 0, 1 },
   { 1, 0, 1, 0, 0, 1, 0, 0, 1, 1 },
   { 1, 0, 0, 1, 0, 0, 0, 0, 0, 1 },
   { 1, 1, 0, 0, 0, 0, 1, 1, 0, 1 },
   { 1, 0, 0, 0, 1, 0, 1, 1, 0, 1 },
   { 1, 0, 0, 0, 0, 1, 1, 0, 1, 1 },
   { 1, 1, 0, 1, 0, 0, 0, 0, 1, 1 },
   { 1, 0, 0, 1, 1, 1, 1, 0, 0, 1 },
   { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
   };


int stepCounter = 0;

int posX = 1;
int posY = 1;
const int endPosX = 8;
const int endPosY = 8;
short int output[DIMX][DIMY];

char empty;

int Kiselsteine [DIMX*DIMY]; // stack for backwards way
int waydepth = 0;

void forward (int incx, int incy)
{
   //Set Kiselsteine to remember the path
   //
   if (waydepth + 2 < DIMX*DIMY)
   {
      Kiselsteine[waydepth ++] = posX;
      Kiselsteine[waydepth ++] = posY;
   }
   posX += incx;
   posY += incy;
}

void backward ()
{
   //Get last Kiselsteine to go backwards
   //
   if (waydepth - 2 >= 0)
   {
      // first pop Y !!
      posY = Kiselsteine[-- waydepth];
      posX = Kiselsteine[-- waydepth];
   }
}


void solve_labyrinth() //mache nächsten Schritt
{
   stepCounter++;

   //Umgebung abtasten und laufen, falls neuer Weg frei
   for (int i = -1; i < 2; i += 2)
   {
      //drüber, drunter
      if (labyrinth[posX + i][posY] == 1)  //wenn Weg versperrt
      {
         output[posX + i][posY] += 100;  //zeige, dass als Mauer erkannt
      }
      else if (output[posX + i][posY] == 0)  //wenn Weg frei und noch nicht betreten
      {
         // posX += i;  //setze Position auf freies Feld
         forward (i, 0);
         output[posX][posY] += 1;  //markiere als einmal betretenes Feld
         return;
      }

      //links, rechts
      if (labyrinth[posX][posY + i] == 1)  //wenn Weg versperrt
      {
         output[posX][posY + i] += 100;  //zeige, dass als Mauer erkannt
      }
      else if (output[posX][posY + i] == 0)  //wenn Weg frei und noch nicht betreten
      {
         // posY += i;  //setze Position auf freies Feld
         forward (0, i);
         output[posX][posY] += 1;  //markiere als einmal betretenes Feld
         return;
      }
   }
   
   //Sackgasse!
   //
   // backwards simply following the Kiselsteine!
   output[posX][posY] = -1;  //markiere als Sackgasse
   backward ();
}


int main()
{
   //erstelle output array
   for (int i = 0; i < DIMX; i++)
   {
      for (int j = 0; j < DIMY; j++)
      {
         output[i][j] = 0;
      }
   }
   output[posX][posY] = 1;  //setze Startposition

   do
   {
      solve_labyrinth();

      printf("\n");

      //Ausgabe des Wegs
      for (int i = 0; i < DIMX; i++)
      {
         for (int j = 0; j < DIMY; j++)
         {
            printf("%3d ", output[i][j]);
         }
         printf("\n");
      }
      printf("posX: %d\n", posX);
      printf("posY: %d\n", posY);

      scanf("%c", &empty);

   } while (posX != endPosX || posY != endPosY);  //solange Position nicht erreicht

   printf("\nDas angestrebte Ziel wurde erreicht.\n");
   printf("Sie haben %d Schritte benoetigt.\n", stepCounter);
   scanf("%c", &empty);

   return 0;
}
